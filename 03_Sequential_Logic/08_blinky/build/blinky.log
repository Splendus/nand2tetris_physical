
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.54+23 (git sha1 513f0f16d, x86_64-apple-darwin23.5-clang++ 18.1.8 -fPIC -O3)

-- Parsing `Include.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: Include.v
Parsing Verilog input from `Include.v' to AST representation.
Storing AST representation for module `$abstract\Nand'.
Storing AST representation for module `$abstract\Not'.
Storing AST representation for module `$abstract\Buffer'.
Storing AST representation for module `$abstract\And'.
Storing AST representation for module `$abstract\Or'.
Storing AST representation for module `$abstract\Xor'.
Storing AST representation for module `$abstract\Mux'.
Storing AST representation for module `$abstract\DMux'.
Storing AST representation for module `$abstract\Not16'.
Storing AST representation for module `$abstract\Buffer16'.
Storing AST representation for module `$abstract\And16'.
Storing AST representation for module `$abstract\Or16'.
Storing AST representation for module `$abstract\Mux16'.
Storing AST representation for module `$abstract\Or8Way'.
Storing AST representation for module `$abstract\HalfAdder'.
Storing AST representation for module `$abstract\FullAdder'.
Storing AST representation for module `$abstract\Add16'.
Storing AST representation for module `$abstract\Inc16'.
Storing AST representation for module `$abstract\DFF'.
Storing AST representation for module `$abstract\Bit'.
Storing AST representation for module `$abstract\Register'.
Storing AST representation for module `$abstract\PC'.
Successfully finished Verilog frontend.

-- Parsing `blinky.v' using frontend ` -vlog2k' --

2. Executing Verilog-2005 frontend: blinky.v
Parsing Verilog input from `blinky.v' to AST representation.
Storing AST representation for module `$abstract\blinky'.
Successfully finished Verilog frontend.

-- Parsing `blinky_tb.v' using frontend ` -vlog2k' --

3. Executing Verilog-2005 frontend: blinky_tb.v
Parsing Verilog input from `blinky_tb.v' to AST representation.
Storing AST representation for module `$abstract\blinky_tb'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -abc9 -device u -top blinky -json build/blinky.json' --

4. Executing SYNTH_ICE40 pass.

4.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

4.2. Executing HIERARCHY pass (managing design hierarchy).

4.3. Executing AST frontend in derive mode using pre-parsed AST for module `\blinky'.
Generating RTLIL representation for module `\blinky'.

4.3.1. Analyzing design hierarchy..
Top module:  \blinky

4.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\Buffer'.
Generating RTLIL representation for module `\Buffer'.

4.3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\PC'.
Generating RTLIL representation for module `\PC'.

4.3.4. Analyzing design hierarchy..
Top module:  \blinky
Used module:     \Buffer
Used module:     \PC

4.3.5. Executing AST frontend in derive mode using pre-parsed AST for module `\Register'.
Generating RTLIL representation for module `\Register'.

4.3.6. Executing AST frontend in derive mode using pre-parsed AST for module `\Or'.
Generating RTLIL representation for module `\Or'.

4.3.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux16'.
Generating RTLIL representation for module `\Mux16'.

4.3.8. Executing AST frontend in derive mode using pre-parsed AST for module `\Inc16'.
Generating RTLIL representation for module `\Inc16'.

4.3.9. Analyzing design hierarchy..
Top module:  \blinky
Used module:     \Buffer
Used module:     \PC
Used module:         \Register
Used module:         \Or
Used module:         \Mux16
Used module:         \Inc16

4.3.10. Executing AST frontend in derive mode using pre-parsed AST for module `\Add16'.
Generating RTLIL representation for module `\Add16'.

4.3.11. Executing AST frontend in derive mode using pre-parsed AST for module `\Or16'.
Generating RTLIL representation for module `\Or16'.

4.3.12. Executing AST frontend in derive mode using pre-parsed AST for module `\And16'.
Generating RTLIL representation for module `\And16'.

4.3.13. Executing AST frontend in derive mode using pre-parsed AST for module `\Not16'.
Generating RTLIL representation for module `\Not16'.

4.3.14. Executing AST frontend in derive mode using pre-parsed AST for module `\Nand'.
Generating RTLIL representation for module `\Nand'.

4.3.15. Executing AST frontend in derive mode using pre-parsed AST for module `\Not'.
Generating RTLIL representation for module `\Not'.

4.3.16. Executing AST frontend in derive mode using pre-parsed AST for module `\Bit'.
Generating RTLIL representation for module `\Bit'.

4.3.17. Analyzing design hierarchy..
Top module:  \blinky
Used module:     \Buffer
Used module:     \PC
Used module:         \Register
Used module:             \Bit
Used module:         \Or
Used module:             \Nand
Used module:             \Not
Used module:         \Mux16
Used module:             \Or16
Used module:             \And16
Used module:             \Not16
Used module:         \Inc16
Used module:             \Add16

4.3.18. Executing AST frontend in derive mode using pre-parsed AST for module `\DFF'.
Generating RTLIL representation for module `\DFF'.

4.3.19. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux'.
Generating RTLIL representation for module `\Mux'.

4.3.20. Executing AST frontend in derive mode using pre-parsed AST for module `\FullAdder'.
Generating RTLIL representation for module `\FullAdder'.

4.3.21. Analyzing design hierarchy..
Top module:  \blinky
Used module:     \Buffer
Used module:     \PC
Used module:         \Register
Used module:             \Bit
Used module:                 \DFF
Used module:                 \Mux
Used module:                     \Or
Used module:                         \Nand
Used module:                         \Not
Used module:         \Mux16
Used module:             \Or16
Used module:             \And16
Used module:             \Not16
Used module:         \Inc16
Used module:             \Add16
Used module:                 \FullAdder

4.3.22. Executing AST frontend in derive mode using pre-parsed AST for module `\HalfAdder'.
Generating RTLIL representation for module `\HalfAdder'.

4.3.23. Executing AST frontend in derive mode using pre-parsed AST for module `\And'.
Generating RTLIL representation for module `\And'.

4.3.24. Analyzing design hierarchy..
Top module:  \blinky
Used module:     \Buffer
Used module:     \PC
Used module:         \Register
Used module:             \Bit
Used module:                 \DFF
Used module:                 \Mux
Used module:                     \Or
Used module:                         \Nand
Used module:                         \Not
Used module:                     \And
Used module:         \Mux16
Used module:             \Or16
Used module:             \And16
Used module:             \Not16
Used module:         \Inc16
Used module:             \Add16
Used module:                 \FullAdder
Used module:                     \HalfAdder

4.3.25. Executing AST frontend in derive mode using pre-parsed AST for module `\Xor'.
Generating RTLIL representation for module `\Xor'.

4.3.26. Analyzing design hierarchy..
Top module:  \blinky
Used module:     \Buffer
Used module:     \PC
Used module:         \Register
Used module:             \Bit
Used module:                 \DFF
Used module:                 \Mux
Used module:                     \Or
Used module:                         \Nand
Used module:                         \Not
Used module:                     \And
Used module:         \Mux16
Used module:             \Or16
Used module:             \And16
Used module:             \Not16
Used module:         \Inc16
Used module:             \Add16
Used module:                 \FullAdder
Used module:                     \HalfAdder
Used module:                         \Xor

4.3.27. Analyzing design hierarchy..
Top module:  \blinky
Used module:     \Buffer
Used module:     \PC
Used module:         \Register
Used module:             \Bit
Used module:                 \DFF
Used module:                 \Mux
Used module:                     \Or
Used module:                         \Nand
Used module:                         \Not
Used module:                     \And
Used module:         \Mux16
Used module:             \Or16
Used module:             \And16
Used module:             \Not16
Used module:         \Inc16
Used module:             \Add16
Used module:                 \FullAdder
Used module:                     \HalfAdder
Used module:                         \Xor
Removing unused module `$abstract\blinky_tb'.
Removing unused module `$abstract\blinky'.
Removing unused module `$abstract\PC'.
Removing unused module `$abstract\Register'.
Removing unused module `$abstract\Bit'.
Removing unused module `$abstract\DFF'.
Removing unused module `$abstract\Inc16'.
Removing unused module `$abstract\Add16'.
Removing unused module `$abstract\FullAdder'.
Removing unused module `$abstract\HalfAdder'.
Removing unused module `$abstract\Or8Way'.
Removing unused module `$abstract\Mux16'.
Removing unused module `$abstract\Or16'.
Removing unused module `$abstract\And16'.
Removing unused module `$abstract\Buffer16'.
Removing unused module `$abstract\Not16'.
Removing unused module `$abstract\DMux'.
Removing unused module `$abstract\Mux'.
Removing unused module `$abstract\Xor'.
Removing unused module `$abstract\Or'.
Removing unused module `$abstract\And'.
Removing unused module `$abstract\Buffer'.
Removing unused module `$abstract\Not'.
Removing unused module `$abstract\Nand'.
Removed 24 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

4.4.4. Executing PROC_INIT pass (extract init attributes).

4.4.5. Executing PROC_ARST pass (detect async resets in processes).

4.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\DFF.$proc$../../03_Sequential_Logic/DFF.v:16$385'.

4.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\DFF.\out' using process `\DFF.$proc$../../03_Sequential_Logic/DFF.v:16$385'.
  created $dff cell `$procdff$386' with positive edge clock.

4.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `DFF.$proc$../../03_Sequential_Logic/DFF.v:16$385'.
Cleaned up 0 empty switches.

4.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module Xor.
Optimizing module And.
Optimizing module HalfAdder.
Optimizing module FullAdder.
Optimizing module Mux.
Optimizing module DFF.
Optimizing module Bit.
Optimizing module Not.
Optimizing module Nand.
Optimizing module Not16.
Optimizing module And16.
Optimizing module Or16.
Optimizing module Add16.
Optimizing module Inc16.
Optimizing module Mux16.
Optimizing module Or.
Optimizing module Register.
Optimizing module PC.
Optimizing module Buffer.
Optimizing module blinky.

4.5. Executing FLATTEN pass (flatten design).
Deleting now unused module Xor.
Deleting now unused module And.
Deleting now unused module HalfAdder.
Deleting now unused module FullAdder.
Deleting now unused module Mux.
Deleting now unused module DFF.
Deleting now unused module Bit.
Deleting now unused module Not.
Deleting now unused module Nand.
Deleting now unused module Not16.
Deleting now unused module And16.
Deleting now unused module Or16.
Deleting now unused module Add16.
Deleting now unused module Inc16.
Deleting now unused module Mux16.
Deleting now unused module Or.
Deleting now unused module Register.
Deleting now unused module PC.
Deleting now unused module Buffer.
<suppressed ~69 debug messages>

4.6. Executing TRIBUF pass.

4.7. Executing DEMINOUT pass (demote inout ports to input or output).

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.
<suppressed ~1308 debug messages>

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..
Removed 255 unused cells and 1850 unused wires.
<suppressed ~352 debug messages>

4.10. Executing CHECK pass (checking for obvious problems).
Checking module blinky...
Found and reported 0 problems.

4.11. Executing OPT pass (performing simple optimizations).

4.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
<suppressed ~156 debug messages>
Removed a total of 52 cells.

4.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blinky..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blinky.
Performed a total of 0 changes.

4.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.11.6. Executing OPT_DFF pass (perform DFF optimizations).

4.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..
Removed 0 unused cells and 1062 unused wires.
<suppressed ~1038 debug messages>

4.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.11.9. Rerunning OPT passes. (Maybe there is more to do..)

4.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blinky..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blinky.
Performed a total of 0 changes.

4.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.11.13. Executing OPT_DFF pass (perform DFF optimizations).

4.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.11.16. Finished OPT passes. (There is nothing left to do.)

4.12. Executing FSM pass (extract and optimize FSM).

4.12.1. Executing FSM_DETECT pass (finding FSMs in design).

4.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blinky..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blinky.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.13.6. Executing OPT_DFF pass (perform DFF optimizations).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.13.9. Finished OPT passes. (There is nothing left to do.)

4.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 16) from wire blinky.prescaler.

4.15. Executing PEEPOPT pass (run peephole optimizers).

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.17. Executing SHARE pass (SAT-based resource sharing).

4.18. Executing TECHMAP pass (map to technology primitives).

4.18.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/cmp2lut.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

4.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module blinky:
  created 0 $alu and 0 $macc cells.

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blinky..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blinky.
Performed a total of 0 changes.

4.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.22.6. Executing OPT_DFF pass (perform DFF optimizations).

4.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.22.9. Finished OPT passes. (There is nothing left to do.)

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

4.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

4.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

4.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

4.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

4.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

4.26. Executing TECHMAP pass (map to technology primitives).

4.26.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

4.26.2. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

4.26.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

4.27. Executing ICE40_BRAMINIT pass.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.
<suppressed ~11 debug messages>

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.28.3. Executing OPT_DFF pass (perform DFF optimizations).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blinky..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blinky.
Performed a total of 0 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.30.6. Executing OPT_DFF pass (perform DFF optimizations).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.30.9. Finished OPT passes. (There is nothing left to do.)

4.31. Executing ICE40_WRAPCARRY pass (wrap carries).

4.32. Executing TECHMAP pass (map to technology primitives).

4.32.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.32.2. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

4.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~268 debug messages>

4.33. Executing OPT pass (performing simple optimizations).

4.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.33.3. Executing OPT_DFF pass (perform DFF optimizations).

4.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.33.5. Finished fast OPT passes.

4.34. Executing ICE40_OPT pass (performing simple optimizations).

4.34.1. Running ICE40 specific optimizations.

4.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.34.4. Executing OPT_DFF pass (perform DFF optimizations).

4.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.34.6. Finished OPT passes. (There is nothing left to do.)

4.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

4.36. Executing TECHMAP pass (map to technology primitives).

4.36.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

4.36.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~51 debug messages>

4.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.39. Executing ICE40_OPT pass (performing simple optimizations).

4.39.1. Running ICE40 specific optimizations.

4.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.39.4. Executing OPT_DFF pass (perform DFF optimizations).

4.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..
Removed 0 unused cells and 116 unused wires.
<suppressed ~1 debug messages>

4.39.6. Rerunning OPT passes. (Removed registers in this run.)

4.39.7. Running ICE40 specific optimizations.

4.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blinky.

4.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blinky'.
Removed a total of 0 cells.

4.39.10. Executing OPT_DFF pass (perform DFF optimizations).

4.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blinky..

4.39.12. Finished OPT passes. (There is nothing left to do.)

4.40. Executing TECHMAP pass (map to technology primitives).

4.40.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

4.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

4.41. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

4.42. Executing ABC9 pass.

4.42.1. Executing ABC9_OPS pass (helper functions for ABC9).

4.42.2. Executing ABC9_OPS pass (helper functions for ABC9).

4.42.3. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module blinky.
Found 0 SCCs.

4.42.4. Executing ABC9_OPS pass (helper functions for ABC9).

4.42.5. Executing TECHMAP pass (map to technology primitives).

4.42.5.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.42.5.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~127 debug messages>

4.42.6. Executing OPT pass (performing simple optimizations).

4.42.6.1. Executing OPT_EXPR pass (perform const folding).

4.42.6.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

4.42.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

4.42.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

4.42.6.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

4.42.6.6. Executing OPT_DFF pass (perform DFF optimizations).

4.42.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).

4.42.6.8. Executing OPT_EXPR pass (perform const folding).

4.42.6.9. Finished OPT passes. (There is nothing left to do.)

4.42.7. Executing TECHMAP pass (map to technology primitives).

4.42.7.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/abc9_map.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/abc9_map.v' to AST representation.
Successfully finished Verilog frontend.

4.42.7.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~2 debug messages>

4.42.8. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/abc9_model.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Generating RTLIL representation for module `$__ABC9_SCC_BREAKER'.
Generating RTLIL representation for module `$__DFF_N__$abc9_flop'.
Generating RTLIL representation for module `$__DFF_P__$abc9_flop'.
Successfully finished Verilog frontend.

4.42.9. Executing ABC9_OPS pass (helper functions for ABC9).

4.42.10. Executing ABC9_OPS pass (helper functions for ABC9).

4.42.11. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

4.42.12. Executing AIGMAP pass (map logic to AIG).
Module blinky: replaced 0 cells with 0 new cells, skipped 2178 cells.
  not replaced 4 cell types:
    1985 $scopeinfo
      83 $_NOT_
      81 $_AND_
      29 SB_DFF

4.42.12.1. Executing ABC9_OPS pass (helper functions for ABC9).

4.42.12.2. Executing ABC9_OPS pass (helper functions for ABC9).

4.42.12.3. Executing XAIGER backend.
<suppressed ~34 debug messages>
Extracted 81 AND gates and 228 wires from module `blinky' to a netlist network with 30 inputs and 32 outputs.

4.42.12.4. Executing ABC9_EXE pass (technology mapping using ABC9).

4.42.12.5. Executing ABC9.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     30/     32  and =      81  lev =   16 (7.03)  mem = 0.00 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     30/     32  and =      87  lev =   16 (7.03)  mem = 0.00 MB  ch =    2  box = 0  bb = 0
ABC: cst =       0  cls =      2  lit =       2  unused =     113  proof =     0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   52. Obj =  136. Set =  564. CutMin = no
ABC: Node =      87.  Ch =     2.  Total mem =    0.02 MB. Peak cut mem =    0.01 MB.
ABC: P:  Del = 8531.00.  Ar =      48.0.  Edge =      180.  Cut =      438.  T =     0.00 sec
ABC: P:  Del = 8531.00.  Ar =      48.0.  Edge =      180.  Cut =      438.  T =     0.00 sec
ABC: P:  Del = 8531.00.  Ar =      36.0.  Edge =      114.  Cut =      438.  T =     0.00 sec
ABC: F:  Del = 8531.00.  Ar =      34.0.  Edge =      109.  Cut =      282.  T =     0.00 sec
ABC: A:  Del = 8531.00.  Ar =      34.0.  Edge =      109.  Cut =      362.  T =     0.00 sec
ABC: A:  Del = 8531.00.  Ar =      34.0.  Edge =      109.  Cut =      362.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: The network is not changed by "&mfs".
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     30/     32  and =     129  lev =   16 (7.03)  mem = 0.00 MB  box = 0  bb = 0
ABC: Mapping (K=4)  :  lut =     34  edge =     109  lev =    5 (2.34)  mem = 0.00 MB
ABC: LUT = 34 : 2=9 26.5 %  3=9 26.5 %  4=16 47.1 %  Ave = 3.21
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.04 seconds, total: 0.04 seconds

4.42.12.6. Executing AIGER frontend.
<suppressed ~132 debug messages>
Removed 201 unused cells and 260 unused wires.

4.42.12.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       36
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:       31
Removing temp directory.

4.42.13. Executing TECHMAP pass (map to technology primitives).

4.42.13.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/abc9_unmap.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__DFF_x__$abc9_flop'.
Generating RTLIL representation for module `\$__ABC9_SCC_BREAKER'.
Successfully finished Verilog frontend.

4.42.13.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

4.43. Executing ICE40_WRAPCARRY pass (wrap carries).

4.44. Executing TECHMAP pass (map to technology primitives).

4.44.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

4.44.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 0 unused cells and 545 unused wires.

4.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       36
  1-LUT                2
  2-LUT                9
  3-LUT                9
  4-LUT               16
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       36
  1-LUT                2
  2-LUT                9
  3-LUT                9
  4-LUT               16
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       36
  1-LUT                2
  2-LUT                9
  3-LUT                9
  4-LUT               16
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~72 debug messages>

4.46. Executing TECHMAP pass (map to technology primitives).

4.46.1. Executing Verilog-2005 frontend: /Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/Users/dominikgeng/dev/cocoa/oss-cad-suite/libexec/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$619b7c9a4d44585e10b42f7fb79b16304cca97c5\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01101010 for cells of type $lut.
No more expansions possible.
<suppressed ~104 debug messages>
Removed 0 unused cells and 72 unused wires.

4.47. Executing AUTONAME pass.
Renamed 79 objects in module blinky (3 iterations).
<suppressed ~72 debug messages>

4.48. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `blinky'. Setting top module to blinky.

4.48.1. Analyzing design hierarchy..
Top module:  \blinky

4.48.2. Analyzing design hierarchy..
Top module:  \blinky
Removed 0 unused modules.

4.49. Printing statistics.

=== blinky ===

   Number of wires:               4970
   Number of wire bits:           7077
   Number of public wires:        4970
   Number of public wire bits:    7077
   Number of ports:                  2
   Number of port bits:              3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2050
     $scopeinfo                   1985
     SB_DFF                         29
     SB_LUT4                        36

4.50. Executing CHECK pass (checking for obvious problems).
Checking module blinky...
Found and reported 0 problems.

4.51. Executing JSON backend.

End of script. Logfile hash: ab25259b9a, CPU: user 2.03s system 0.13s, MEM: 51.69 MB peak
Yosys 0.54+23 (git sha1 513f0f16d, x86_64-apple-darwin23.5-clang++ 18.1.8 -fPIC -O3)
Time spent: 27% 24x read_verilog (0 sec), 22% 18x opt_clean (0 sec), ...
